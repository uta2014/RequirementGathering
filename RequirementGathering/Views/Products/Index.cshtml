@model IEnumerable<RequirementGathering.Models.Product>

@{
    ViewBag.Title = Resources.Index;
}

<h2>@ViewBag.Title</h2>

<p>
    <span style='float:left;'>
        @Html.ActionLink(Resources.CreateNew, "Create")
    </span>
    <span style='float:right;'>
        @Resources.SortBy
        <select id="sortSelect" onchange="selectSort()">
            <option value="Name_asc">@Resources.NameDisplay Asc</option>
            <option value="Name_dec">@Resources.NameDisplay Dec</option>
        </select>
    </span>
</p>
<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.Name)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Description)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.IsActive)
        </th>
        <th></th>
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        var description = Resource.GetPropertyValue<Product>(item.Id, "Description");
        var name = Resource.GetPropertyValue<Product>(item.Id, "Name");
        <tr>
            <td>
                @name
            </td>
            <td>
                @description
            </td>
            <td>
                @(item.IsActive ? Resources.Yes : Resources.No)
            </td>
            <td>
                <a href="/@ViewBag.CurrentCulture/Products/Edit/@item.Id">
                    <span class="glyphicon glyphicon-edit"></span>&nbsp;@Resources.Edit
                </a>
            </td>
            <td>
                <a href="/@ViewBag.CurrentCulture/Products/Details/@item.Id">
                    <span class="glyphicon glyphicon-icon-list"></span>&nbsp;@Resources.Details
                </a>
            </td>
        </tr>
    }

</table>


<script>

    (function () {
        try{
            var sortSelect = document.getElementById("sortSelect");
            var sortSelectedIndex = '@ViewData["sortSelectedIndex"]';
            if (sortSelect != null) {
                if (sortSelectedIndex != '' && sortSelectedIndex.length>0) {
                    if (parseInt(sortSelectedIndex) >= 0) {
                        sortSelect.selectedIndex = parseInt(sortSelectedIndex);
                    }
                }
            }
        } catch (error) {

        }
        
    })()

    function selectSort() {
        
        var sortSelect = document.getElementById("sortSelect");
        var sortstr = sortSelect.value;
        if (sortstr == "") {
            return;
        }
        var sortp = sortstr.split("_");
        location.href = "/@ViewBag.CurrentCulture/Products/SortedIndex?sortname=" + sortp[0] + "&sorttype=" + sortp[1] + "&sortSelectedIndex=" + sortSelect.selectedIndex;


    }
</script>